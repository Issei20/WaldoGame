{"ast":null,"code":"var _jsxFileName = \"/home/atsal/Desktop/top/secure-projects/waldogamef/src/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { doc, setDoc, Timestamp, updateDoc, getDocs } from \"firebase/firestore\";\nimport { db } from './firebase-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer(_ref) {\n  _s();\n\n  let {\n    gameOver\n  } = _ref;\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(true);\n  const scoresRef = doc(db, 'scores', 'new');\n  const [newScores, setNewScores] = useState([]);\n\n  async function saveDataStart() {\n    await updateDoc(doc(scoresRef), {\n      startTime: Date.now()\n    });\n  }\n\n  async function saveDataEnd() {\n    await updateDoc(scoresRef, {\n      endTime: Date.now()\n    });\n  }\n\n  useEffect(() => {\n    const getScores = async () => {\n      const dataScores = await getDocs(scoresRef);\n      setNewScores(dataScores.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      })));\n    };\n  });\n  useEffect(() => {\n    let interval = null;\n\n    if (gameOver === true) {\n      setTimerOn(false);\n      saveDataEnd();\n      console.log(`seconds elapsed = ${Math.floor(millis / 1000)}`);\n    }\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 10);\n      }, 10);\n      saveDataStart();\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerOn, gameOver]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [(\"0\" + Math.floor(time / 60000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [(\"0\" + Math.floor(time / 1000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: (\"0\" + time / 10 % 100).slice(-2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timer, \"2aP3Agu7EeuOJ81bl6t+vEuTycU=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/atsal/Desktop/top/secure-projects/waldogamef/src/Timer.js"],"names":["React","useState","useEffect","doc","setDoc","Timestamp","updateDoc","getDocs","db","Timer","gameOver","time","setTime","timerOn","setTimerOn","scoresRef","newScores","setNewScores","saveDataStart","startTime","Date","now","saveDataEnd","endTime","getScores","dataScores","docs","map","data","id","interval","console","log","Math","floor","millis","setInterval","prevTime","clearInterval","slice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { doc, setDoc, Timestamp, updateDoc, getDocs } from \"firebase/firestore\"; \nimport { db } from './firebase-config';\n\nfunction Timer( {gameOver} ) {\n    const [time, setTime] = useState(0);\n    const [timerOn, setTimerOn] = useState(true);\n    const scoresRef = doc(db, 'scores', 'new');\n    const [newScores, setNewScores] = useState([])\n \n async function saveDataStart() {\n    await updateDoc(doc(scoresRef), {\n        startTime: Date.now(),\n      });\n    }  \n\n\n  async function saveDataEnd() {\n    await updateDoc(scoresRef, { endTime: Date.now() });\n  }\n    useEffect(() => {\n        const getScores = async () => {\n            const dataScores = await getDocs(scoresRef);\n            setNewScores(dataScores.docs.map((doc) => ({...doc.data(),  id: doc.id})))\n          }\n    })\n\n\n    useEffect(() => {\n        let interval = null;\n\n        if(gameOver === true) {\n            setTimerOn(false)\n            saveDataEnd()\n            console.log(`seconds elapsed = ${Math.floor(millis / 1000)}`)\n        }\n\n        if(timerOn) {\n          interval = setInterval(() => {\n            setTime(prevTime => prevTime + 10)\n          },10)\n          saveDataStart()\n\n        } else {\n            clearInterval(interval)\n        }\n\n        return () => clearInterval(interval)\n\n    }, [timerOn, gameOver])\n\n\n\n    return (\n        <div className=\"timerContainer\">\n            <div>\n            <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n            <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:</span>\n            <span>{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\n            \n            </div>\n        </div>\n    )\n}\n\n\nexport default Timer"]},"metadata":{},"sourceType":"module"}